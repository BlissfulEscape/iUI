/*
 * build.gradle for iUI
 * (c) 2013 by the iUI project members
 *
 * Work-in-progress on Gradle replacement for ANT build.
 *
 * Google App Engine Gradle file has been renamed to gae.gradle
 */

import com.google.javascript.jscomp.CompilerOptions as ClosureCompilerOptions

// Pull plugins from Maven Repos
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.eriwen:gradle-js-plugin:1.5.1'
        classpath 'com.eriwen:gradle-css-plugin:1.2.1'
    }
}

// Invoike the plugins
apply plugin: 'js'
apply plugin: 'css'

// Get version number from build.properties until we get it from package.json??
Properties buildProps = new Properties()
buildProps.load(new FileInputStream("build.properties"))
def propVersion =  buildProps.get("iui.version")
def DSTAMP = (new Date()).format("yyyyMMdd")
def iuiVersion = propVersion ?: DSTAMP
println "iuiVersion: ${iuiVersion}"

def iuiSrcDir       = 'web-app/iui'
def iuiReleaseDir   = "${buildDir}/iui-${iuiVersion}"

task outputDirs << {
    file(iuiReleaseDir).mkdirs()
}

ClosureCompilerOptions closureOptionsMinify = new ClosureCompilerOptions()
//def googleClosureReplacements = ['iui.version': iuiVersion]
closureOptionsMinify.prettyPrint = false;

task compressJs(type: com.eriwen.gradle.js.tasks.MinifyJsTask, dependsOn: outputDirs) {
    source = "${iuiSrcDir}/iui.js"
    dest = file("${iuiReleaseDir}/iui-min.js")
    closure {
        warningLevel = 'DEFAULT'
//        compilationLevel = 'WHITESPACE_ONLY'
//        compilationLevel = 'ADVANCED_OPTIMIZATIONS'
        compilerOptions = closureOptionsMinify
//        compilerOptions.setDefineReplacements(googleClosureReplacements)
    }
}

gzipJs {
    source = compressJs
    dest = file("${iuiReleaseDir}/iui-min.js.gzip")
}

minifyCss {
    source = "${iuiSrcDir}/iui.css"
    dest = file("${iuiReleaseDir}/iui-min.css")
    yuicompressor { // Optional
        lineBreakPos = -1
    }
}

gzipCss {
    source = minifyCss
    dest = "${iuiReleaseDir}/iui-min.css.gzip"
}

task copyStaticFiles(type: Copy, description: "Copy static files to release directory") {
    from iuiSrcDir
    into file(iuiReleaseDir)
    include 'iui.js', '*.png', '*.jpg', '*.css'
}

task releaseDir(dependsOn: [gzipJs, gzipCss, copyStaticFiles], description: "Build the iUI release directory." ) << {
	println "Built iUI Release Directory"
}

task zipRelease(type: Zip, dependsOn: releaseDir) {
    description "Build the iUI release zip file."
    from iuiReleaseDir
    destinationDir  buildDir
    baseName  "iui"
    version iuiVersion
}

task clean(description: "Delete build directory") << {
    delete buildDir
}


