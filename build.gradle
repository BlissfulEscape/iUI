/*
 * build.gradle for iUI
 * (c) 2013 by the iUI project members
 *
 * Work-in-progress on Gradle replacement for ANT build.
 *
 * Google App Engine Gradle file has been renamed to gae.gradle
 */

import com.google.javascript.jscomp.CompilerOptions as ClosureCompilerOptions

// Pull plugins from Maven Repos
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.eriwen:gradle-js-plugin:1.5.1'
        classpath 'com.eriwen:gradle-css-plugin:1.2.1'
    }
}

// Invoike the plugins
apply plugin: 'js'
apply plugin: 'css'

// Get version number from build.properties until we get it from package.json??
Properties buildProps = new Properties()
buildProps.load(new FileInputStream("build.properties"))
Properties localProps = new Properties()
try {
    localProps.load(new FileInputStream("local.build.properties"))
} catch(Exception e) {
    println "Couldn't read 'local.build.properties' -- only needed for Google Code release upload"
}
def propVersion =  buildProps.get("iui.version")
def iuiReleaseSummary =  buildProps.get("iui.release.summary") ?: "unofficial release"
def DSTAMP = (new Date()).format("yyyyMMdd")
def iuiVersion = propVersion ?: "v${DSTAMP}".toString()
println "iuiVersion: ${iuiVersion}"

def iuiSrcDir           = "${rootDir}/web-app/iui"
def iuiReleaseDir       = "${buildDir}/iui-${iuiVersion}"

def iuiWebAppSrcDir     = "${rootDir}/web-app"
def iuiWebAppReleaseDir = "${iuiReleaseDir}/web-app"

def iuiLibSrcDir        = "${iuiWebAppSrcDir}/iui"
def iuiLibReleaseDir    = "${iuiWebAppReleaseDir}/iui"

defaultTasks 'releaseDir'

task outputDirs << {
    file(iuiLibReleaseDir).mkdirs()
}

ClosureCompilerOptions closureOptionsMinify = new ClosureCompilerOptions()
//def googleClosureReplacements = ['iui.version': iuiVersion]
closureOptionsMinify.prettyPrint = false;

task compressJs(type: com.eriwen.gradle.js.tasks.MinifyJsTask, dependsOn: outputDirs) {
    source = "${iuiSrcDir}/iui.js"
    dest = file("${iuiLibReleaseDir}/iui-min.js")
    closure {
        warningLevel = 'DEFAULT'
//        compilationLevel = 'WHITESPACE_ONLY'
//        compilationLevel = 'ADVANCED_OPTIMIZATIONS'
        compilerOptions = closureOptionsMinify
//        compilerOptions.setDefineReplacements(googleClosureReplacements)
    }
}

gzipJs {
    source = compressJs
    dest = file("${iuiLibReleaseDir}/iui-min.js.gzip")
}

minifyCss {
    file(iuiLibReleaseDir).mkdirs()
    source = "${iuiSrcDir}/iui.css"
    dest = file("${iuiLibReleaseDir}/iui-min.css")
    yuicompressor { // Optional
        lineBreakPos = -1
    }
}

gzipCss {
    source = minifyCss
    dest = "${iuiLibReleaseDir}/iui-min.css.gzip"
}

task copyTxtFiles(type: Copy, dependsOn: outputDirs, description: "Copy text files from root to release root directory") {
    from rootDir
    into file(iuiReleaseDir)
    include '*.txt'
}

task copyStaticFiles(type: Copy, dependsOn: outputDirs, description: "Copy static files to release directory") {
    from iuiWebAppSrcDir
    into file(iuiWebAppReleaseDir)
    include '**/*'
    exclude '**/*.js', '**/*.css', '**/*.jar', '**/node_modules/**'
}

task copyFilteredFiles(type: Copy, dependsOn: outputDirs, description: "Copy filtered files to release directory") {
    from iuiWebAppSrcDir
    into file(iuiWebAppReleaseDir)
    include '**/*.js', '**/*.css'
    exclude '**/node_modules/**'
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [VERSION: iuiVersion])
}

task releaseDir(dependsOn: [gzipJs, gzipCss, copyTxtFiles, copyStaticFiles, copyFilteredFiles], description: "Build the iUI release directory." ) << {
    println "Built iUI Release Directory"
}

task zipRelease(type: Zip, dependsOn: releaseDir) {
    description "Build the iUI release zip file."
    from iuiReleaseDir
    destinationDir  buildDir
    baseName  "iui"
    version iuiVersion
}

task uploadGoogleCode(dependsOn: zipRelease, description: "Upload release to Google Code") << {
    ant.taskdef(name: 'googlecode_upload', classname : 'net.bluecow.googlecode.ant.GoogleCodeUploadTask') {
        classpath {
            fileset(dir: 'releasetools/lib', includes: 'ant-googlecode-0.0.3.jar')
        }
    }
    ant.property(file: 'local.build.properties')
    def username = localProps.get("gc.username")
    def password = localProps.get("gc.password")
    def uploadFile =  zipRelease.outputs.files.getSingleFile()
    def targetFilename = uploadFile.name
    def dryRun = false
    if (!dryRun) {
        ant.googlecode_upload(
                username: username,
                password: password,
                projectname: 'iui',
                filename: uploadFile,
                targetfilename: targetFilename,
                summary: iuiReleaseSummary,
                verbose: "true"
        )
    } else {
        println "Google Code Upload Dry run. Configured to upload ${uploadFile} to ${targetFilename} as ${username}/${password}"
    }
}

task clean(description: "Delete build directory") << {
    delete buildDir
}


